# -*- coding: utf-8 -*-
"""Summary of cases (rape) 2015-2020.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZMZX0nTzBSyK8MHDdZzNZee1SZ9pJD3

Import Necessary Libraries:
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore') #suppresses the warnings displayed by the code editor.

#load the dataset into the dataframe
Rape_df = pd.read_csv('/content/Summary of cases (rape) 2015-2020.csv')

#display max rows and max columns
pd.set_option('display.max_rows',50,'display.max_columns',28)

#display the first five rows of the dataframe
Rape_df.head()

#checking the shape of the dataframe
Rape_df.shape #the dataset have 36 rows and 8 columns

#getting the basic information of the dataset
Rape_df.info()

#getting the summary of the Numerical columns
Summary_stats = Rape_df.describe()
Summary_stats

#drop the unnecessary column from the dataframe which is not required for analysis
Rape_df = Rape_df.drop('Sl. No.',axis=1)
Rape_df

# Rename columns for easier access (remove spaces and hyphens)
Rape_df.columns = ['State_UT', '2015_CR', '2016_CR', '2017_CR', '2018_CR', '2019_CR', '2020_CR']

#checking for null values in the dataframe
Rape_df.isnull().sum() #there is no null value

#checking for duplicate entries in the dataframe
Num_duplicates = Rape_df.duplicated().sum()
Num_duplicates #there is no duplicate entry in the dataframe

"""**Univariate analysis:**"""

# Univariate Analysis of Yearly Counts
plt.figure(figsize=(10, 5))
sns.histplot(Rape_df.iloc[:, 1:].values.flatten(), bins=10, kde=True)
plt.title("Distribution of Case Counts from (2015-2020)")
plt.xlabel("Number of Cases")
plt.ylabel("Frequency")
plt.show()

"""**Yearly Trends Analysis:**"""

# Sum cases across all states for each year
yearly_totals = Rape_df.iloc[:, 1:].sum()

plt.figure(figsize=(10, 5))
plt.plot(yearly_totals.index, yearly_totals.values, marker='o')
plt.title("Total Rape Cases Victims from (2015-2020)")
plt.xlabel("Year")
plt.ylabel("Total Cases")
plt.grid(True)
plt.show()

"""**State-level Analysis:**"""

# Sum across years for each state
state_totals = Rape_df.set_index("State_UT").sum(axis=1).nlargest(15)

plt.figure(figsize=(15, 7))
state_totals.plot(kind="bar", color="coral")
plt.title("Top 15 States with Highest Total Cases (2015-2020)")
plt.xlabel("State")
plt.ylabel("Total Cases")
plt.xticks(rotation=45)
plt.show()

"""**Comparative Analysis Across Years:**"""

state = "Maharashtra"  #  state of interest

plt.figure(figsize=(10, 5))
Rape_df[Rape_df["State_UT"] == state].set_index("State_UT").T.plot(kind="bar", legend=False)
plt.title(f"Yearly Trend of Cases in {state} from 2015 to 2020")
plt.xlabel("Year")
plt.ylabel("Number of Cases")
plt.show()

"""**Correlation Analysis Across Years:**"""

# Calculate correlation matrix across years
correlation = Rape_df.iloc[:, 1:].corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation, annot=True, cmap="Blues")
plt.title("Correlation Between Case Counts by Year")
plt.show()

"""**Top 5 States yearly Total Rape Cases:**"""

#Calculate total cases for each state across all years
Rape_df['Total Cases'] = Rape_df.iloc[:, 1:].sum(axis=1)

#Select the top 5 states with the highest total cases
top_5_states = Rape_df.nlargest(5, 'Total Cases')

#Set 'States/ UTs' as index to make the plotting easier
top_5_states.set_index("State_UT", inplace=True)

#Transpose the DataFrame to have years as rows and states as columns
top_5_states = top_5_states.iloc[:, :-1].T

#Plot the grouped bar chart
top_5_states.plot(kind='bar', figsize=(15, 8), width=0.8)
plt.title("Yearly Trend of Cases in Top 5 States with Highest Rape Cases (2015-2020)")
plt.xlabel("Year")
plt.ylabel("Number of Cases")
plt.legend(title="States", loc="upper left")
plt.xticks(rotation=0)
plt.show()

